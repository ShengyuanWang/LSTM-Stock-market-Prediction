dim(trainXY$dataX) <- c(dim_train[1], 1, dim_train[2])
dim(testXY$dataX) <- c(dim_test[1], 1, dim_test[2])
# Initialize the model
model <- keras_model_sequential()
# Train the model
trained_model <- model %>%
layer_lstm(units = 4,
input_shape = c(1, look_back)) %>%
layer_dense(units = 1) %>%
compile(loss = 'mean_squared_error',
optimizer = 'adam') %>%
fit(
trainXY$dataX,
trainXY$dataY,
epochs = 20,
batch_size = 73,
verbose = 1,
validation_split = 0.25
)
plot(trained_model)
# Fit the model to get predicted value
trainPredict <- model %>%
predict(trainXY$dataX,
verbose = 1)
testPredict <- model %>%
predict(testXY$dataX,
verbose = 1)
trainPredict <- trainPredict * spread + min_value
testPredict <- testPredict * spread + min_value
# Plot the output
df <- data.frame(
index = 1:length(dataset),
value = dataset * spread + min_value,
type = 'raw'
) %>%
rbind(data.frame(
index = 1:length(trainPredict) + look_back,
value = trainPredict,
type = 'train'
)) %>%
rbind(data.frame(
index = 1:length(testPredict) + look_back + length(train),
value = testPredict,
type = 'test'
))
ggplot(data = df) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
geom_vline(xintercept = length(train) + 0.5) +
theme_minimal()
df
df %>%
filter(index >= 1000,
idex < 2000)
df %>%
filter(index >= 1000,
index < 2000)
df %>%
filter(index >= 1000,
index < 2000) %>%
df %>%
filter(index >= 1000,
index < 2000) %>%
ggplot() +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
geom_vline(xintercept = length(train) + 0.5) +
theme_minimal()
df1 <- df %>%
filter(index >= 1000,
index < 2000)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
geom_vline(xintercept = length(train) + 0.5) +
theme_minimal()
df1 <- df %>%
filter(index >= 1000,
index < 1100)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
geom_vline(xintercept = length(train) + 0.5) +
theme_minimal()
df1 <- df %>%
filter(index >= 1000,
index < 1100)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
# Plot the output
df <- data.frame(
index = 1:length(dataset),
value = dataset * spread + min_value,
type = 'raw'
) %>%
rbind(data.frame(
index = 1:length(trainPredict) + look_back,
value = trainPredict,
type = 'train'
)) %>%
rbind(data.frame(
index = 1:length(testPredict) + look_back + length(train),
value = testPredict,
type = 'test'
))
ggplot(data = df) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
geom_vline(xintercept = length(train) + 0.5) +
theme_minimal()
df1 <- df %>%
filter(index >= 1,
index < 10)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 90,
index < 100)
df1 <- df %>%
filter(index >= 90,
index < 100)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 90,
index < 200)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 90,
index < 150)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 90,
index < 1000)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 90,
index < 500)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 450,
index < 500)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 0,
index < 60)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 0,
index < 5)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 0,
index < 6)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 0,
index < 7)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
df1 <- df %>%
filter(index >= 0,
index < 8)
ggplot(data = df1) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
theme_minimal()
# Plot the output
df <- data.frame(
index = 1:length(dataset),
value = dataset * spread + min_value,
type = 'raw'
) %>%
rbind(data.frame(
index = 1:length(trainPredict) + look_back,
value = trainPredict,
type = 'train'
)) %>%
rbind(data.frame(
index = 1:length(testPredict) + look_back + length(train),
value = testPredict,
type = 'test'
))
ggplot(data = df) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
geom_vline(xintercept = length(train) + 0.5) +
theme_minimal()
model %>%
predict(1)
model %>%
predict(0.057)
# Initialize the model
model <- keras_model_sequential()
# Train the model
trained_model <- model %>%
layer_lstm(units = 4,
input_shape = c(1, look_back)) %>%
layer_dense(units = 1) %>%
compile(loss = 'mean_squared_error',
optimizer = 'adam') %>%
fit(
trainXY$dataX,
trainXY$dataY,
epochs = 20,
batch_size = 73,
verbose = 1,
validation_split = 0.25
)
plot(trained_model)
# Initialize the model
model <- keras_model_sequential()
# Train the model
trained_model <- model %>%
layer_lstm(units = 4,
input_shape = c(1, look_back)) %>%
layer_dense(units = 1) %>%
compile(loss = 'mean_squared_error',
optimizer = 'adam') %>%
fit(
trainXY$dataX,
trainXY$dataY,
epochs = 20,
batch_size = 73,
verbose = 1,
validation_split = 0.25
)
plot(trained_model)
# Fit the model to get predicted value
trainPredict <- model %>%
predict(trainXY$dataX,
verbose = 1)
testPredict <- model %>%
predict(testXY$dataX,
verbose = 1)
trainPredict <- trainPredict * spread + min_value
testPredict <- testPredict * spread + min_value
# Plot the output
df <- data.frame(
index = 1:length(dataset),
value = dataset * spread + min_value,
type = 'raw'
) %>%
rbind(data.frame(
index = 1:length(trainPredict) + look_back,
value = trainPredict,
type = 'train'
)) %>%
rbind(data.frame(
index = 1:length(testPredict) + look_back + length(train),
value = testPredict,
type = 'test'
))
ggplot(data = df) +
geom_line(mapping = aes(x = index,
y = value,
color = type)) +
geom_vline(xintercept = length(train) + 0.5) +
theme_minimal()
# Save the model
saveRDS(trained_model, "LSTM_model.rds")
dataset
# Save the model
#saveRDS(trained_model, "LSTM_model.dep")
# Save the model
saveRDS(trained_model, "LSTM_model.dep")
trainPredict
# Save the model
model %>% save_model_tf("model")
list.files("model")
input = c(1,2,3)
trainPredict <- model %>%
predict(input)
input <- trainXY$dataX
trainPredict <- model %>%
predict(input)
trainPredict
input
input <- trainXY$dataX %>%
head()
input
trainXY$dataX
trainPredict <- model %>%
predict(input)
trainPredict
input1 <- trainXY$dataX %>%
head()
input2 <- testXY$dataX %>%
head()
trainPredict <- model %>%
predict(input1)
testPredict <- model %>%
predict(input2)
trainPredict <- trainPredict * spread + min_value
testPredict <- testPredict * spread + min_value
trainPredict
input2
trainXY
trainXY$dataX %>%
head()
trainXY %>%
head()
trainXY$dataY %>%
head()
trainXY$dataY
trainXY$dataY %>%
head()
trainXY$dataY
# Save the predicted numbers
df %>%
filter(type %in% c("test", "train"))
# Save the predicted numbers
result <- df %>%
filter(type %in% c("test", "train")) %>%
select(index, value)
bitcoin_data %>% cbind(result)
df %>%
filter(index >= 1460)
df %>%
filter(index >= 1460) %>%
ggplot(aes(x = index,
y = value,
color = type)) +
geom_line()
df %>%
filter(index >= 1460,
index <= 1470) %>%
ggplot(aes(x = index,
y = value,
color = type)) +
geom_line()
df %>%
filter(index >= 1460,
index <= 1467) %>%
ggplot(aes(x = index,
y = value,
color = type)) +
geom_line()
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value)
# Save the predicted numbers
a <- c(1,2,3,4,5)
b <- c(0,0,0,0,0)
empty_data <- cbind(a,b)
result <- df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
bitcoin_data %>% cbind(result)
empty_data
df
# Save the predicted numbers
index <- c(1,2,3,4,5)
value <- c(0,0,0,0,0)
empty_data <- cbind(index,value)
result <- df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data) %>%
arrange(index)
bitcoin_data %>% cbind(result)
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data) %>%
arrange(index)
index_1 <- c(1,2,3,4,5)
index_2 <- c(1858,1859,1860,1861,1862)
value <- c(0,0,0,0,0)
empty_data_1 <- cbind(index_1,value)
empty_data_2 <- cbind(index_2,value)
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
arrange(index) %>%
mutate(index = ifelse(index >= 1460, index - 5, index))
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
arrange(index) %>%
mutate(index_new = ifelse(index >= 1460, index - 5, index))
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
arrange(index)
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value)
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1)
empty_data_1
index <- c(1,2,3,4,5)
value <- c(0,0,0,0,0)
empty_data_1 <- cbind(index,value)
index <- c(1858,1859,1860,1861,1862)
empty_data_2 <- cbind(index,value)
empty_data_1
empty_data_2
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
arrange(index) %>%
mutate(index_new = ifelse(index >= 1460, index - 5, index))
index <- c(1,2,3,4,5)
value <- c(0,0,0,0,0)
empty_data_1 <- cbind(index,value)
index <- c(1822,1823,1824,1825,1826)
empty_data_2 <- cbind(index,value)
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
arrange(index) %>%
mutate(index_new = ifelse(index >= 1460, index - 5, index))
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
mutate(index_new = ifelse(index >= 1460, index - 5, index)) %>%
rbind(empty_data_2) %>%
arrange(index)
index <- c(1,2,3,4,5)
value <- c(0,0,0,0,0)
empty_data_1 <- cbind(index,value)
index <- c(1822,1823,1824,1825,1826)
empty_data_2 <- cbind(index,value)
empty_data_1
empty_data_2
df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
mutate(index = ifelse(index >= 1460, index - 5, index)) %>%
rbind(empty_data_2) %>%
arrange(index)
bitcoin_data %>% cbind(result)
result <- df %>%
filter(type %in% c("test", "train")) %>%
select(index, value) %>%
rbind(empty_data_1) %>%
mutate(index = ifelse(index >= 1460, index - 5, index)) %>%
rbind(empty_data_2) %>%
arrange(index)
bitcoin_data %>% cbind(result)
bitcoin_data %>%
cbind(result) %>%
select(Date, value)
(bitcoin_result, "prediction/bitcoin_LSTM_result.csv")
bitcoin_result
bitcoin_result
bitcoin_result <- bitcoin_data %>%
cbind(result) %>%
select(Date, value)
bitcoin_result
write.csv(bitcoin_result, "prediction/bitcoin_LSTM_result.csv")
